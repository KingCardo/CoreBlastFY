//
//  MealDetailsViewController.swift
//  CoreBlastFY
//
//  Created by Riccardo Washington on 4/25/20.
//  Copyright (c) 2020 Riccardo Washington. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MealDetailsDisplayLogic: class {
    func displayRecipe(viewModel: MealDetails.RecipeDetails.ViewModel.RecipeDetails)
}

class MealDetailsViewController: UIViewController, MealDetailsDisplayLogic {
    var interactor: (MealDetailsBusinessLogic & MealDetailsDataStore)?
    var router: (NSObjectProtocol & MealDetailsRoutingLogic & MealDetailsDataPassing)?
    var displayedRecipe: MealDetails.RecipeDetails.ViewModel.RecipeDetails?
    enum Items {
        case title
        case options
        case details
    }
    
    let items: [Items] = [.title, .options, .details]
    
    enum Mode {
        case ingredients
        case instructions
    }
    
    var mode: Mode = .ingredients
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MealDetailsInteractor()
        let presenter = MealDetailsPresenter()
        let router = MealDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        NotificationCenter.default.addObserver(self, selector: #selector(preventScreenRecording), name: UIScreen.capturedDidChangeNotification, object: nil)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setupViews()
        configure()
        setupHeaderView()
    }
    
    // MARK: Do something
    
    @objc private func preventScreenRecording() {
        let isRecording = UIScreen.main.isCaptured
        
        if isRecording {
            recipeTableView.isHidden = true
        } else {
            recipeTableView.isHidden = false
        }
    }
    
    private lazy var recipeTableView: UITableView = {
        let tv = UITableView(frame: .zero, style: .plain)
        tv.delegate = self
        tv.dataSource = self
        tv.separatorStyle = .none
        tv.allowsSelection = false
        tv.register(IngredientsTableViewCell.self, forCellReuseIdentifier: IngredientsTableViewCell.id)
        tv.register(InstructionsTableViewCell.self, forCellReuseIdentifier: InstructionsTableViewCell.id)
        tv.register(RecipeDescriptionTableViewCell.self, forCellReuseIdentifier: RecipeDescriptionTableViewCell.id)
        tv.register(RecipeOptionsTableViewCell.self, forCellReuseIdentifier: RecipeOptionsTableViewCell.id)
        return tv
    }()
    
    private func setupHeaderView() {
        let headerView = DetailHeaderView(image: displayedRecipe?.image)
        headerView.frame.size.height = view.bounds.height * 0.3
        recipeTableView.tableHeaderView = headerView
    }
    
    private func configure() {
        interactor?.passPresenterRecipe(with: interactor?.recipe)
    }
    
    func displayRecipe(viewModel: MealDetails.RecipeDetails.ViewModel.RecipeDetails) {
        displayedRecipe = viewModel
        recipeTableView.reloadData()
    }
    
    private func setupViews() {
        view.addSubview(recipeTableView)
        recipeTableView.backgroundColor = .black
        recipeTableView.fillSuperview()
    }
}

extension MealDetailsViewController: UITableViewDelegate {
}

extension MealDetailsViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return items.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let item = items[section]
        switch item {
        case .title: return 1
        case .options: return 1
        case .details:
            switch mode {
            case .ingredients:
                return displayedRecipe?.ingredients.count ?? 0
            case .instructions:
                return displayedRecipe?.instructions.count ?? 0
            }
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.section {
        case 0:
            let cell = tableView.dequeueReusableCell(withIdentifier: RecipeDescriptionTableViewCell.id, for: indexPath) as! RecipeDescriptionTableViewCell
            cell.configure(with: displayedRecipe)
            return cell
        case 1:
            let cell = tableView.dequeueReusableCell(withIdentifier: RecipeOptionsTableViewCell.id, for: indexPath) as! RecipeOptionsTableViewCell
            cell.option1Buttonhandler = { [weak self] in
                self?.mode = .ingredients
                self?.recipeTableView.reloadSections(IndexSet(integer: 2), with: .automatic)
            }
            cell.option2Buttonhandler = {  [weak self] in
                self?.mode = .instructions
                self?.recipeTableView.reloadSections(IndexSet(integer: 2), with: .automatic)
            }
            return cell
        default:
            switch mode {
            case .ingredients:
                let ingredient = displayedRecipe?.ingredients[indexPath.item]
                guard let cell = tableView.dequeueReusableCell(withIdentifier: IngredientsTableViewCell.id, for: indexPath) as? IngredientsTableViewCell else { return UITableViewCell() }
                cell.configure(with: ingredient)
                return cell
                
            case .instructions:
                guard let cell = tableView.dequeueReusableCell(withIdentifier: InstructionsTableViewCell.id, for: indexPath) as? InstructionsTableViewCell else { return UITableViewCell() }
                let instruction = displayedRecipe?.instructions[indexPath.item]
                cell.configure(with: instruction)
                return cell
            }
        }
    }
}
