//
//  MealDetailsViewController.swift
//  CoreBlastFY
//
//  Created by Riccardo Washington on 4/25/20.
//  Copyright (c) 2020 Riccardo Washington. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MealDetailsDisplayLogic: class {
    func displayRecipe(viewModel: MealDetails.RecipeDetails.ViewModel.RecipeDetails)
}

class MealDetailsViewController: UIViewController, MealDetailsDisplayLogic {
    var interactor: (MealDetailsBusinessLogic & MealDetailsDataStore)?
    var router: (NSObjectProtocol & MealDetailsRoutingLogic & MealDetailsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MealDetailsInteractor()
        let presenter = MealDetailsPresenter()
        let router = MealDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setupViews()
        configure()
    }
    
    // MARK: Do something
    
    private lazy var recipeCollectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        let cv = UICollectionView(frame: .zero, collectionViewLayout: layout)
        cv.autoresizingMask = [.flexibleHeight]
        cv.dataSource = self
        cv.delegate = self
        cv.backgroundColor = .white
        cv.isScrollEnabled = true
        cv.register(IngredientsCollectionViewCell.self, forCellWithReuseIdentifier: IngredientsCollectionViewCell.id)
        cv.register(InstructionsCollectionViewCell.self, forCellWithReuseIdentifier: InstructionsCollectionViewCell.id)
        return cv
        
    }()
    
    enum Items {
        case image
        case title
        case details
    }
    
    let items: [Items] = [.image, .title, .details]
    
    var mode: Mode = .ingredients
    enum Mode {
        case ingredients
        case instructions
    }
    
    var displayedRecipe: MealDetails.RecipeDetails.ViewModel.RecipeDetails?
    
    
    private func configure() {
        interactor?.passPresenterRecipe(with: interactor?.recipe)
    }
    
    func displayRecipe(viewModel: MealDetails.RecipeDetails.ViewModel.RecipeDetails) {
        displayedRecipe = viewModel
        recipeCollectionView.reloadData()
    }
    
    private func setupViews() {
        view.addSubview(recipeCollectionView)
        recipeCollectionView.fillSuperview()
    }
}

extension MealDetailsViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        let item = items[section]
        switch item {
        case .image: return 1
        case .title: return 1
        case .details:
            switch mode {
            case .ingredients:
                return displayedRecipe?.ingredients.count ?? 0
            case .instructions:
                return displayedRecipe?.instructions.count ?? 0
            }
        }
        
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let item = items[indexPath.item]
        switch item {
        case .image: return UICollectionViewCell()
            //            let headerCell = AppFullscreenHeaderCell()
            //            headerCell.programCell.configure(item: displayedPlan)
            //            headerCell.programCell.layer.cornerRadius = 0
            //            headerCell.clipsToBounds = true
            //            headerCell.programCell.backgroundView = nil
        //            return headerCell
        case .title: return UICollectionViewCell()
        case .details:
            switch mode {
            case .ingredients:
                let ingredient = displayedRecipe?.ingredients[indexPath.item]
                guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: IngredientsCollectionViewCell.id, for: indexPath) as? IngredientsCollectionViewCell else { return UICollectionViewCell() }
                cell.configure(with: ingredient)
                return cell
                
            case .instructions:
                guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: InstructionsCollectionViewCell.id, for: indexPath) as? InstructionsCollectionViewCell else { return UICollectionViewCell() }
                return cell
            }
        }
    }
}

extension MealDetailsViewController: UICollectionViewDelegate {
    
}

extension MealDetailsViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let item = items[indexPath.item]
        switch item {
        case .image: return .init(width: collectionView.frame.width, height: 250)
        case .title: return .init(width: collectionView.frame.width, height: 100)
        case .details:  return .init(width: collectionView.frame.width, height: 45)
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 8
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return .init(top: 8, left: 0, bottom: 0, right: 0)
    }
    
}
