//
//  MealDetailsViewController.swift
//  CoreBlastFY
//
//  Created by Riccardo Washington on 4/25/20.
//  Copyright (c) 2020 Riccardo Washington. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MealDetailsDisplayLogic: class {
  func displayRecipe(viewModel: MealDetails.RecipeDetails.ViewModel.RecipeDetails)
}

class MealDetailsViewController: UIViewController, MealDetailsDisplayLogic {
  var interactor: (MealDetailsBusinessLogic & MealDetailsDataStore)?
  var router: (NSObjectProtocol & MealDetailsRoutingLogic & MealDetailsDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = MealDetailsInteractor()
    let presenter = MealDetailsPresenter()
    let router = MealDetailsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: View lifecycle
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        configure()
    }
  
  // MARK: Do something
    
    var displayedRecipe: MealDetails.RecipeDetails.ViewModel.RecipeDetails?
  
  
  private func configure() {
    view.backgroundColor = .red
    interactor?.passPresenterRecipe(with: interactor?.recipe)
  }
  
  func displayRecipe(viewModel: MealDetails.RecipeDetails.ViewModel.RecipeDetails) {
    displayedRecipe = viewModel
    //nameTextField.text = viewModel.name
  }
}
