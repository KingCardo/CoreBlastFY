//
//  MealPlanDetailViewController.swift
//  CoreBlastFY
//
//  Created by Riccardo Washington on 4/18/20.
//  Copyright (c) 2020 Riccardo Washington. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MealPlanDetailDisplayLogic: class {
    func displayMealPlanDetails(viewModel: MealPlanDetail.FetchDetails.ViewModel)
}

class MealPlanDetailViewController: UIViewController, MealPlanDetailDisplayLogic {
    var interactor: (MealPlanDetailBusinessLogic & MealPlanDetailDataStore)?
    var router: (NSObjectProtocol & MealPlanDetailRoutingLogic & MealPlanDetailDataPassing)?
    var displayedPlan: MealPlanDetail.FetchDetails.ViewModel.DisplayMealPlanDetails?
    var items: [Items] = [.header, .description, .recipes]
    
    enum Items {
        case header
        case description
        case recipes
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MealPlanDetailInteractor()
        let presenter = MealPlanDetailPresenter()
        let router = MealPlanDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setupViews()
        fetchMealPlanDetails()
    }
    
    // Routing
    
     func routeToMealDetails(with recipe: Recipe?) {
        interactor?.recipe = recipe
        router?.routeToMealDetails()
    }
    
    func routeToTipDetails(with tip: String) {
        let genericDetail = GenericDetailViewController()
        genericDetail.data = tip
        present(genericDetail, animated: true, completion: nil)
    }
    
    // MARK: Views
    
    private let tableView = UITableView(frame: .zero, style: .plain)
    
    //MARK: Methods
    
    private func fetchMealPlanDetails() {
        let request = MealPlanDetail.FetchDetails.Request()
        interactor?.fetchMealPlanDetails(request: request)
    }
    
    func displayMealPlanDetails(viewModel: MealPlanDetail.FetchDetails.ViewModel) {
        displayedPlan = viewModel.displayedPlan
        tableView.reloadData()
    }
    
    private func setupViews() {
        setupTableView()
    }
    
    private func setupTableView() {
        view.addSubview(tableView)
        tableView.fillSuperview()
        tableView.dataSource = self
        tableView.delegate = self
        
        tableView.tableFooterView = UIView()
        tableView.backgroundColor = .black
        tableView.separatorStyle = .none
        tableView.allowsSelection = false
        tableView.contentInsetAdjustmentBehavior = .never
        tableView.register(AppFullscreenDescriptionCell.self, forCellReuseIdentifier: AppFullscreenDescriptionCell.id)
        tableView.register(MealPlanCell.self, forCellReuseIdentifier: MealPlanCell.id)
        tableView.register(AppFullscreenHeaderCell.self, forCellReuseIdentifier: AppFullscreenHeaderCell.id)
    }
}

extension MealPlanDetailViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let height = view.frame.height
        let item = items[indexPath.row]
        switch item {
        case .header: return height * 0.3
        case .description: return UITableView.automaticDimension
        case .recipes: return height * 0.5
        }
    }
}
extension MealPlanDetailViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return items.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let displayedPlan = displayedPlan else { return
            UITableViewCell() }
        let item = items[indexPath.row]
        
        switch item {
        case .header:
            let headerCell = tableView.dequeueReusableCell(withIdentifier: AppFullscreenHeaderCell.id, for: indexPath) as! AppFullscreenHeaderCell
            headerCell.programCell.configure(item: displayedPlan)
            headerCell.programCell.layer.cornerRadius = 0
            headerCell.clipsToBounds = true
            headerCell.programCell.backgroundView = nil
            return headerCell
        case .description:
            let cell = tableView.dequeueReusableCell(withIdentifier: AppFullscreenDescriptionCell.id, for: indexPath) as! AppFullscreenDescriptionCell
            cell.item = displayedPlan.description
            cell.backgroundColor = .black
            return cell
        case .recipes:
            let cell = tableView.dequeueReusableCell(withIdentifier: MealPlanCell.id, for: indexPath) as! MealPlanCell
            cell.parent = self
            cell.item = displayedPlan
            return cell
        }
    }
}
