//
//  PreWorkoutViewController.swift
//  CoreBlast
//
//  Created by Riccardo Washington on 1/25/20.
//  Copyright (c) 2020 Riccardo Washington. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PreWorkoutDisplayLogic: class
{
    func displayPreWorkoutViewModel(viewModel: PreWorkout.FetchUser.ViewModel)
}

class PreWorkoutViewController: UIViewController, PreWorkoutDisplayLogic
{
    var interactor: (PreWorkoutBusinessLogic& PreWorkoutDataStore)?
    var router: (NSObjectProtocol & PreWorkoutRoutingLogic & PreWorkoutDataPassing)?
    
    var displayedPreWorkoutData: PreWorkout.FetchUser.ViewModel.UserDetails?
    
    // MARK: Views
    
    private var preworkoutView: PreWorkoutView?
    private var loadingView: LoadingView?
    private var loadingSpinner: UIActivityIndicatorView?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Routing
    
    func routeToWorkoutScene() {
        router?.routeToWorkoutScene()
    }
    
    private func removeLoadingView() {
        loadingView?.removeFromSuperview()
        loadingView = nil
    }
    
    func displayLoadingView() {
        loadingView = LoadingView()
        view.addSubview(loadingView!)
        preworkoutView?.isHidden = true
        loadingView!.translatesAutoresizingMaskIntoConstraints = false
        loadingView!.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        loadingView!.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        loadingView!.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        loadingView!.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        loadingView!.runTimer { [weak self] in
            self?.removeLoadingView()
            self?.routeToWorkoutScene()
        }
    }
    
    // MARK: View lifecycle
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
            fetchUserInfo()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PreWorkoutInteractor()
        let presenter = PreWorkoutPresenter()
        let router = PreWorkoutRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.preWorkoutDataStore = interactor
        setupNavigationBar()
        
    }
    
    private func setupNavigationBar() {
        navigationItem.title = "Workout"
        view.backgroundColor = .black
    }
    
    private func setupPreWorkoutUI(viewModel: PreWorkout.FetchUser.ViewModel) {
        preworkoutView = PreWorkoutView(viewModel: viewModel)
        guard let preworkoutView = preworkoutView else { return }
        view.addSubview(preworkoutView)
        
        preworkoutView.preWorkoutViewController = self
        preworkoutView.translatesAutoresizingMaskIntoConstraints = false
        preworkoutView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor).isActive = true
        preworkoutView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        preworkoutView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        preworkoutView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
    }
    
    // MARK: Do something
    
    func displayPreWorkoutViewModel(viewModel: PreWorkout.FetchUser.ViewModel) {
        let viewModel = viewModel
        //removeLoadingSpinner()
        setupPreWorkoutUI(viewModel: viewModel)
    }
    
    private func displayLoadingSpinner() {
        loadingSpinner = UIActivityIndicatorView(style: .large)
        loadingSpinner?.color = .lightGray
        loadingSpinner?.startAnimating()
        view.addSubview(loadingSpinner!)
        
        loadingSpinner?.translatesAutoresizingMaskIntoConstraints = false
        loadingSpinner?.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        loadingSpinner?.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
        
    }
    
    private func removeLoadingSpinner() {
        loadingSpinner?.stopAnimating()
        loadingSpinner?.removeFromSuperview()
        loadingSpinner = nil
    }
    
    // func fetchExercises() {
    //        displayLoadingSpinner()
    //
    //        let fetchExercise = ExerciseStorage.loadExercises()
    //        if !fetchExercise {
    //            let request = PreWorkout.FetchExercises.Request()
    //            interactor?.fetchExercises(request: request)
    //        } else {
    //           interactor?.exercises = ExerciseStorage.exercises
    //        }
    //  }
    
    private func fetchUserInfo() {
        let request = PreWorkout.FetchUser.Request()
        interactor?.fetchUserInfo(request: request)
    }
    
    private func showFailureAlert(title: String, message: String)
    {
        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)
        let alertAction = UIAlertAction(title: "OK", style: .default, handler: nil)
        alertController.addAction(alertAction)
        showDetailViewController(alertController, sender: nil)
    }
    
}
