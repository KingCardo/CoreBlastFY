//
//  WorkoutWorker.swift
//  CoreBlast
//
//  Created by Riccardo Washington on 1/26/20.
//  Copyright (c) 2020 Riccardo Washington. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

//protocol WorkoutInfoStoreProtocol {
//    func fetchWorkout(exercises: [Exercise], completion: @escaping(Workout?, WorkoutInfoStoreError?) -> Void)
//}

class WorkoutWorker {
    
    var dataStore: [Exercise]
    
    init(dataStore: [Exercise]) {
        self.dataStore = dataStore
    }
    
    func fetchWorkout(completion: @escaping(Workout) -> Void) {
        let workout = Workout(user: UserAPI.user, exercises: self.dataStore)
        completion(workout)
    }
}
    
//    var exerciseInfoDataStore: ExerciseInfoStoreProtocol
//
//    init(exerciseInfoDataStore: ExerciseInfoStoreProtocol) {
//        self.exerciseInfoDataStore = exerciseInfoDataStore
//    }
//
//    func fetchExercises(completion: @escaping([Exercise], ExerciseInfoStoreError?) -> Void) {
//        exerciseInfoDataStore.fetchExercises { (exercises, error) in
//            if exercises.count > 0 {
//                completion(exercises, nil)
//            } else {
//                completion([], ExerciseInfoStoreError.CannotFetch(error?.localizedDescription))
//            }
//        }
//    }
//}
//
enum WorkoutInfoStoreResult<U> {
    case Success(result: U)
    case Failure(error: WorkoutInfoStoreError)
}

enum WorkoutInfoStoreError: Equatable, Error {
    case CannotFetch(String)
}

func ==(lhs: WorkoutInfoStoreError, rhs: WorkoutInfoStoreError) -> Bool {
  switch (lhs, rhs) {
  case (.CannotFetch(let a), .CannotFetch(let b)) where a == b: return true
    default: return false
    }
}
