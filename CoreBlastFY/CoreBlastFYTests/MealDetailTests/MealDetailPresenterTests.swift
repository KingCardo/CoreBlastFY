//
//  MealDetailPresenterTests.swift
//  CoreBlastFY
//
//  Created by Riccardo Washington on 4/25/20.
//  Copyright (c) 2020 Riccardo Washington. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CoreBlastFY
import XCTest

class MealDetailPresenterTests: XCTestCase {
  // MARK: Subject under test
  
  var sut: MealDetailsPresenter!
  
  // MARK: Test lifecycle
  
  override func setUp() {
    super.setUp()
    setupMealDetailPresenter()
  }
  
  override func tearDown() {
    super.tearDown()
    sut = nil
  }
  
  // MARK: Test setup
  
  func setupMealDetailPresenter() {
    sut = MealDetailsPresenter()
  }
  
  // MARK: Test doubles
  
  class MealDetailDisplayLogicSpy: MealDetailsDisplayLogic
  {
    func displayRecipe(viewModel: MealDetails.RecipeDetails.ViewModel.RecipeDetails) {
        displaySomethingCalled = true
    }
    
    var displaySomethingCalled = false
}
  
  // MARK: Tests
  
  func testPresentRecipeDetails() {
    // Given
    let spy = MealDetailDisplayLogicSpy()
    sut.viewController = spy
    let recipe = Recipe(name: "het", ingredients: [], instructions: [], mealType: .lunch, image: nil)
    let response = MealDetails.RecipeDetails.Response(recipe: recipe)
    
    // When
    sut.presentRecipeDetails(response: response)
    
    // Then
    XCTAssertTrue(spy.displaySomethingCalled, "presentSomething(response:) should ask the view controller to display the result")
  }
}
