//
//  MealDetailViewControllerTests.swift
//  CoreBlastFY
//
//  Created by Riccardo Washington on 4/25/20.
//  Copyright (c) 2020 Riccardo Washington. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CoreBlastFY
import XCTest

class MealDetailViewControllerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: MealDetailsViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp() {
    super.setUp()
    window = UIWindow()
    setupMealDetailViewController()
  }
  
  override func tearDown() {
    window = nil
    sut = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupMealDetailViewController() {
    sut = MealDetailsViewController()
  }
  
  func loadView() {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test doubles
  
  class MealDetailBusinessLogicSpy: MealDetailsBusinessLogic, MealDetailsDataStore
  {
    var recipe: Recipe?
    
    func passPresenterRecipe(with recipe: Recipe?) {
        doSomethingCalled = true
    }
    
    var doSomethingCalled = false

  }
  
  // MARK: Tests
  
  func testShouldDoSomethingWhenViewIsLoaded()
  {
    // Given
    let spy = MealDetailBusinessLogicSpy()
    sut.interactor = spy
    
    // When
    loadView()
    
    // Then
    XCTAssertTrue(spy.doSomethingCalled, "viewDidLoad() should ask the interactor to do something")
  }
  
  func testDisplayRecipe() {
    // Given
    let viewModel = MealDetails.RecipeDetails.ViewModel.RecipeDetails(title: "hey", summary: "hey", image: nil)
    
    // When
    loadView()
    sut.displayRecipe(viewModel: viewModel)
    
    // Then
    //XCTAssertEqual(sut.nameTextField.text, "", "displaySomething(viewModel:) should update the name text field")
  }
}
