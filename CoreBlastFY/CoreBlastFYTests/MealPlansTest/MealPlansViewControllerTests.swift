//
//  MealPlansViewControllerTests.swift
//  CoreBlastFY
//
//  Created by Riccardo Washington on 4/16/20.
//  Copyright (c) 2020 Riccardo Washington. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CoreBlastFY
import XCTest

class MealPlansViewControllerTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: MealPlansViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupMealPlansViewController()
    }
    
    override func tearDown() {
        window = nil
        sut = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupMealPlansViewController() {
        sut = MealPlansViewController()
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class MealPlansBusinessLogicSpy: MealPlansBusinessLogic, MealPlansDataStore {
        var mealPlans: [MealPlan]?

        var doSomethingCalled = false
        
        func getPlansOverview(request: MealPlans.GetPlan.Request) {
            doSomethingCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldDoSomethingWhenViewIsLoaded() {
        // Given
        let spy = MealPlansBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.doSomethingCalled, "viewDidLoad() should ask the interactor to do something")
    }
    
    func testDisplayPlans() {
        // Given
        let mockOv = MealPlans.GetPlan.ViewModel.PlanOverview(title: "demo", summary: "demo", image: nil)
        let viewModel = MealPlans.GetPlan.ViewModel(planOverViews: [mockOv])
        
        // When
        loadView()
        sut.displayPlans(viewModel: viewModel)
        
        // Then
        XCTAssertEqual(sut.displayedPlans.count, viewModel.planOverViews.count, "displayed plans should be equal to viewmodel count")
    }
}
